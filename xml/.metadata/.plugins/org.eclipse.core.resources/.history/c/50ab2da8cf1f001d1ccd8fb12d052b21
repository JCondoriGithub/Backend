package xmlTest;

import java.util.ArrayList;
import java.util.HashSet;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

public class MyAgendaHandler extends DefaultHandler {

	private boolean root;
	
	private int countCV = 0;
	private HashSet<String> ids = new HashSet<String>();
	
	private boolean inOf, inAmici;
	private HashSet<String> idrefs = new HashSet<String>();
	
	boolean inP1, inP2, ofP1, ofP2;
	
	private ArrayList<String> errors = new ArrayList<>();
	public ArrayList<String> getErrors() {
		return errors;
	}
	
	
	@Override
	public void startDocument() throws SAXException {

		System.out.println("start document");
		errors.clear();
		root = true;
		
		inP1 = inP2 = ofP1 = ofP2 = false;
	}
	
	@Override
	public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {

		System.out.println("start element: " + qName);
		if(root && !"agenda".equals(qName)) {
			errors.add("root errata: " + qName);
		}
		root = false;
		
		String eta = attributes.getValue("eta");
		if(eta != null) {
			try {
				if(Integer.parseInt(eta) < 0) {
					errors.add("numero minore di 0: " + eta);
				} else {
					System.out.println("eta: " + eta);
				}
			} catch (Exception e) {
				errors.add("eta non Ã¨ un numero intero: " + eta);
			}
		} 
		
		if(qName.equals("cv")) {
			countCV++;
		}
		
		if(qName.equals("persona")) {
			if(attributes.getValue("id") != null) {
				String id = attributes.getValue("id");
				ids.add(id);
			}
			
			if(qName.equals("of"))
				inOf = true;
			
			inAmici |= qName.equals("amici");
			if(inAmici && attributes.getLength() != 0)
				errors.add("attributi non ammessi");
			if(!inAmici && (attributes.getValue("id") == null || attributes.getValue("nome") == null ||
					attributes.getValue("cognome") == null))
				errors.add("attributi mancanti");
		}
		
	}
	
	@Override
	public void characters(char[] ch, int start, int length) throws SAXException {

		System.out.println("characters: " + new String(ch, start, length));
		
		if(inOf) {
			String idref = new String(ch, start, length);
			idrefs.add(idref);
			inOf = false;
		}
			
	}
	
	@Override
	public void endElement(String uri, String localName, String qName) throws SAXException {

		System.out.println("end element: " + qName);
		
		if(qName.equals("descrizione")) {
			
			if(countCV != 1) {
				errors.add("numero errato di cv: " + countCV);
			}
			
			countCV = 0;
		}
		
		inAmici &= !qName.equals("amici");
	}
	
	@Override
	public void endDocument() throws SAXException {

		System.out.println("end document");
		
		idrefs.removeAll(ids);
		idrefs.forEach(idref -> errors.add("riferimento insistente: " + idref));
	}
}
